What are Streams?
Streams are objects that let you read data from a source or write data to a destination in continuous fashion. In Node.js, there are four types of streams −

Readable − Stream which is used for read operation.

Writable − Stream which is used for write operation.

Duplex − Stream which can be used for both read and write operation.

Transform − A type of duplex stream where the output is computed based on input.

Each type of Stream is an EventEmitter instance and throws several events at different instance of times. For example, some of the commonly used events are −

data − This event is fired when there is data is available to read.

end − This event is fired when there is no more data to read.

error − This event is fired when there is any error receiving or writing data.

finish − This event is fired when all the data has been flushed to underlying system.

Piping the Streams
Piping is a mechanism where we provide the output of one stream as the input to another
 stream. It is normally used to get data from one stream and to pass the output of that 
 stream to another stream. There is no limit on piping operations. 
 Now we'll show a piping example for reading from one file and writing it to another file.

Chaining the Streams
Chaining is a mechanism to connect the output of one stream to another stream and create a
 chain of multiple stream operations. It is normally used with piping operations. 
Now we'll use piping and chaining to first compress a file and then decompress the same.



Readable Stream Properties and Methods

Method	Description
isPaused()	Returns true if the state of  the readable stream is paused, otherwise false
pause()	Pauses the readable stream
pipe()	Turns the readable stream into the specified writable stream
read()	Returns a specified part of the readable stream
resume()	Resumes a paused stream
setEncoding()	Sets the character encoding of the readable stream
unpipe()	Stops turning a readable stream into a writable stream, caused by the pipe() method
unshift()	Pushes some specified data back into the internal buffer
wrap()	Helps reading streams made by older Node.js versions


Writable Stream Properties and Methods
Method	Description
cork()	Stops the writable stream and all written data will be buffered in memory
end()	Ends the writable stream
setDefaultEncoding()	Sets the encoding for the writable stream
uncork()	Flushes all data that has been buffered since the cork() method was called
write()	Writes data to the stream

